/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$home-name: 'home';
$home-x: 57px;
$home-y: 0px;
$home-offset-x: -57px;
$home-offset-y: 0px;
$home-width: 23px;
$home-height: 21px;
$home-total-width: 80px;
$home-total-height: 55px;
$home-image: '../images/sprite.png';
$home: (57px, 0px, -57px, 0px, 23px, 21px, 80px, 55px, '../images/sprite.png', 'home', );
$trust1-name: 'trust1';
$trust1-x: 0px;
$trust1-y: 0px;
$trust1-offset-x: 0px;
$trust1-offset-y: 0px;
$trust1-width: 27px;
$trust1-height: 27px;
$trust1-total-width: 80px;
$trust1-total-height: 55px;
$trust1-image: '../images/sprite.png';
$trust1: (0px, 0px, 0px, 0px, 27px, 27px, 80px, 55px, '../images/sprite.png', 'trust1', );
$trust2-name: 'trust2';
$trust2-x: 0px;
$trust2-y: 27px;
$trust2-offset-x: 0px;
$trust2-offset-y: -27px;
$trust2-width: 26px;
$trust2-height: 28px;
$trust2-total-width: 80px;
$trust2-total-height: 55px;
$trust2-image: '../images/sprite.png';
$trust2: (0px, 27px, 0px, -27px, 26px, 28px, 80px, 55px, '../images/sprite.png', 'trust2', );
$trust3-name: 'trust3';
$trust3-x: 27px;
$trust3-y: 0px;
$trust3-offset-x: -27px;
$trust3-offset-y: 0px;
$trust3-width: 30px;
$trust3-height: 24px;
$trust3-total-width: 80px;
$trust3-total-height: 55px;
$trust3-image: '../images/sprite.png';
$trust3: (27px, 0px, -27px, 0px, 30px, 24px, 80px, 55px, '../images/sprite.png', 'trust3', );
$trust4-name: 'trust4';
$trust4-x: 27px;
$trust4-y: 24px;
$trust4-offset-x: -27px;
$trust4-offset-y: -24px;
$trust4-width: 27px;
$trust4-height: 25px;
$trust4-total-width: 80px;
$trust4-total-height: 55px;
$trust4-image: '../images/sprite.png';
$trust4: (27px, 24px, -27px, -24px, 27px, 25px, 80px, 55px, '../images/sprite.png', 'trust4', );
$home-2x-name: 'home@2x';
$home-2x-x: 114px;
$home-2x-y: 0px;
$home-2x-offset-x: -114px;
$home-2x-offset-y: 0px;
$home-2x-width: 46px;
$home-2x-height: 42px;
$home-2x-total-width: 160px;
$home-2x-total-height: 110px;
$home-2x-image: '../images/sprite@2x.png';
$home-2x: (114px, 0px, -114px, 0px, 46px, 42px, 160px, 110px, '../images/sprite@2x.png', 'home@2x', );
$trust1-2x-name: 'trust1@2x';
$trust1-2x-x: 0px;
$trust1-2x-y: 0px;
$trust1-2x-offset-x: 0px;
$trust1-2x-offset-y: 0px;
$trust1-2x-width: 54px;
$trust1-2x-height: 54px;
$trust1-2x-total-width: 160px;
$trust1-2x-total-height: 110px;
$trust1-2x-image: '../images/sprite@2x.png';
$trust1-2x: (0px, 0px, 0px, 0px, 54px, 54px, 160px, 110px, '../images/sprite@2x.png', 'trust1@2x', );
$trust2-2x-name: 'trust2@2x';
$trust2-2x-x: 0px;
$trust2-2x-y: 54px;
$trust2-2x-offset-x: 0px;
$trust2-2x-offset-y: -54px;
$trust2-2x-width: 52px;
$trust2-2x-height: 56px;
$trust2-2x-total-width: 160px;
$trust2-2x-total-height: 110px;
$trust2-2x-image: '../images/sprite@2x.png';
$trust2-2x: (0px, 54px, 0px, -54px, 52px, 56px, 160px, 110px, '../images/sprite@2x.png', 'trust2@2x', );
$trust3-2x-name: 'trust3@2x';
$trust3-2x-x: 54px;
$trust3-2x-y: 0px;
$trust3-2x-offset-x: -54px;
$trust3-2x-offset-y: 0px;
$trust3-2x-width: 60px;
$trust3-2x-height: 48px;
$trust3-2x-total-width: 160px;
$trust3-2x-total-height: 110px;
$trust3-2x-image: '../images/sprite@2x.png';
$trust3-2x: (54px, 0px, -54px, 0px, 60px, 48px, 160px, 110px, '../images/sprite@2x.png', 'trust3@2x', );
$trust4-2x-name: 'trust4@2x';
$trust4-2x-x: 54px;
$trust4-2x-y: 48px;
$trust4-2x-offset-x: -54px;
$trust4-2x-offset-y: -48px;
$trust4-2x-width: 54px;
$trust4-2x-height: 50px;
$trust4-2x-total-width: 160px;
$trust4-2x-total-height: 110px;
$trust4-2x-image: '../images/sprite@2x.png';
$trust4-2x: (54px, 48px, -54px, -48px, 54px, 50px, 160px, 110px, '../images/sprite@2x.png', 'trust4@2x', );
$spritesheet-width: 80px;
$spritesheet-height: 55px;
$spritesheet-image: '../images/sprite.png';
$spritesheet-sprites: ($home, $trust1, $trust2, $trust3, $trust4, );
$spritesheet: (80px, 55px, '../images/sprite.png', $spritesheet-sprites, );
$retina-spritesheet-width: 160px;
$retina-spritesheet-height: 110px;
$retina-spritesheet-image: '../images/sprite@2x.png';
$retina-spritesheet-sprites: ($home-2x, $trust1-2x, $trust2-2x, $trust3-2x, $trust4-2x, );
$retina-spritesheet: (160px, 110px, '../images/sprite@2x.png', $retina-spritesheet-sprites, );

/*
These "retina group" variables are mappings for the naming and pairing of normal and retina sprites.

The list formatted variables are intended for mixins like `retina-sprite` and `retina-sprites`.
*/
$home-group-name: 'home';
$home-group: ('home', $home, $home-2x, );
$trust1-group-name: 'trust1';
$trust1-group: ('trust1', $trust1, $trust1-2x, );
$trust2-group-name: 'trust2';
$trust2-group: ('trust2', $trust2, $trust2-2x, );
$trust3-group-name: 'trust3';
$trust3-group: ('trust3', $trust3, $trust3-2x, );
$trust4-group-name: 'trust4';
$trust4-group: ('trust4', $trust4, $trust4-2x, );
$retina-groups: ($home-group, $trust1-group, $trust2-group, $trust3-group, $trust4-group, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `retina-sprite` mixin sets up rules and a media query for a sprite/retina sprite.
  It should be used with a "retina group" variable.

The media query is from CSS Tricks: https://css-tricks.com/snippets/css/retina-display-media-query/

$icon-home-group: ('icon-home', $icon-home, $icon-home-2x, );

.icon-home {
  @include retina-sprite($icon-home-group);
}
*/
@mixin sprite-background-size($sprite) {
  $sprite-total-width: nth($sprite, 7);
  $sprite-total-height: nth($sprite, 8);
  background-size: $sprite-total-width $sprite-total-height;
}

@mixin retina-sprite($retina-group) {
  $normal-sprite: nth($retina-group, 2);
  $retina-sprite: nth($retina-group, 3);
  @include sprite($normal-sprite);

  @media (-webkit-min-device-pixel-ratio: 2),
         (min-resolution: 192dpi) {
    @include sprite-image($retina-sprite);
    @include sprite-background-size($normal-sprite);
  }
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}

/*
The `retina-sprites` mixin generates a CSS rule and media query for retina groups
  This yields the same output as CSS retina template but can be overridden in SCSS

@include retina-sprites($retina-groups);
*/
@mixin retina-sprites($retina-groups) {
  @each $retina-group in $retina-groups {
    $sprite-name: nth($retina-group, 1);
    .#{$sprite-name} {
      @include retina-sprite($retina-group);
    }
  }
}
